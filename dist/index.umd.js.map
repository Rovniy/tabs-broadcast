{"version":3,"file":"index.umd.js","sources":["../src/config.ts","../src/tabsWorker.ts","../src/tabsBroadcast.ts"],"sourcesContent":["/**\r\n * @file config.ts\r\n * @description Configuration file for the TabsBroadcast libraries.\r\n *\r\n * This file contains the default configuration options and constants used throughout\r\n * the TabsBroadcast and TabsWorker libraries. It sets up the default values for various\r\n * settings and provides a dictionary for common terms used within the libraries.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport type { TConfig } from './types';\r\n\r\nexport default {\r\n\tdefaultConfig: {\r\n\t\tchannelName: 'xploit_tab_channel', // Broadcast channel name\r\n\t\tlistenOwnChannel: true, // Listen broadcast event on current tab\r\n\t\temitByPrimaryOnly: true, // Emits event only by Primary tab\r\n\t\tonBecomePrimary: () => {}, // Global event when current tab become Primary\r\n\t\tonTabsUpdate: () => {}, // Global event when Primary tab changed\r\n\t},\r\n\tdict: {\r\n\t\ttab_prefix: 'xploit_tab_id_',\r\n\t\tslave : 'xploit_slave',\r\n\t\tprimary : 'xploit_primary',\r\n\t\tprimaryTabId : 'xploit_primary_tab_id',\r\n\t\tprimaryStatusChanged : 'XPLOIT_TAB_STATUS_CHANGED',\r\n\t}\r\n} as TConfig","/**\r\n * @file tabsWorker.ts\r\n * @description A class to manage browser tabs, assigning a primary tab and handling the status changes among tabs.\r\n *\r\n * This library ensures that a single browser tab is marked as the primary tab,\r\n * while others are marked as slave tabs. When the primary tab is closed, the\r\n * status is transferred to another tab. This helps in managing tab-specific\r\n * functionalities like maintaining session states, or performing tasks which\r\n * should only occur in one tab at a time.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config';\r\nimport type { TEvent } from \"./types\";\r\n\r\nexport class TabsWorker {\r\n\tprivate readonly tabId: string;\r\n\r\n\tconstructor() {\r\n\t\tthis.tabId = globalConfig.dict.tab_prefix + Date.now().toString();\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes event listeners for load, beforeunload, and storage events.\r\n\t */\r\n\tprivate init() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\t// Callback for load event\r\n\t\tconst loadCb = () => {\r\n\t\t\tif (!localStorage.getItem(globalConfig.dict.primaryTabId)) {\r\n\t\t\t\tthis.setPrimaryTab(this.tabId);\r\n\t\t\t} else {\r\n\t\t\t\tthis.setSlaveTab(this.tabId);\r\n\t\t\t}\r\n\r\n\t\t\tthis.notifyTabStatus();\r\n\t\t};\r\n\r\n\t\t// Callback for beforeunload event\r\n\t\tconst beforeUnloadCb = () => {\r\n\t\t\tif (this.isPrimaryTab()) {\r\n\t\t\t\tthis.transferPrimaryStatus();\r\n\t\t\t}\r\n\t\t\tthis.removeTabStatus(this.tabId);\r\n\t\t};\r\n\r\n\t\t// Callback for storage event\r\n\t\tconst storageCb = (event: StorageEvent) => {\r\n\t\t\tif (event.key === globalConfig.dict.primaryTabId) {\r\n\t\t\t\tthis.notifyTabStatus();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Adding event listeners\r\n\t\twindow.addEventListener('load', loadCb);\r\n\t\twindow.addEventListener('beforeunload', beforeUnloadCb);\r\n\t\twindow.addEventListener('storage', storageCb);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a key-value pair in localStorage.\r\n\t * @param key - The key to set in localStorage.\r\n\t * @param value - The value to set in localStorage.\r\n\t */\r\n\tprivate set(key: string, value: string) {\r\n\t\tlocalStorage.setItem(key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a value from localStorage by key.\r\n\t * @param key - The key to get from localStorage.\r\n\t * @returns The value associated with the key in localStorage.\r\n\t */\r\n\tprivate get(key: string): string | null {\r\n\t\treturn localStorage.getItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a key from localStorage.\r\n\t * @param key - The key to remove from localStorage.\r\n\t */\r\n\tprivate remove(key: string) {\r\n\t\tlocalStorage.removeItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as the primary tab.\r\n\t * @param id - The ID of the tab to set as primary.\r\n\t */\r\n\tprivate setPrimaryTab(id: string) {\r\n\t\tthis.set(globalConfig.dict.primaryTabId, id);\r\n\t\tthis.set(id, globalConfig.dict.primary);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as a slave tab.\r\n\t * @param id - The ID of the tab to set as slave.\r\n\t */\r\n\tprivate setSlaveTab(id: string) {\r\n\t\tthis.set(id, globalConfig.dict.slave);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfers primary status to another tab if the current primary tab is closed.\r\n\t */\r\n\tprivate transferPrimaryStatus() {\r\n\t\tconst tabs = Object.keys(localStorage).filter(key => key !== globalConfig.dict.primaryTabId && this.get(key) === globalConfig.dict.slave);\r\n\r\n\t\tif (tabs.length > 0) {\r\n\t\t\tthis.setPrimaryTab(tabs[0]);\r\n\t\t} else {\r\n\t\t\tthis.remove(globalConfig.dict.primaryTabId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the status of a tab from localStorage.\r\n\t * @param id - The ID of the tab to remove status for.\r\n\t */\r\n\tprivate removeTabStatus(id: string) {\r\n\t\tthis.remove(id);\r\n\t}\r\n\r\n\t/**\r\n\t * Notifies other tabs of the current tab's status (primary or slave).\r\n\t */\r\n\tprivate notifyTabStatus() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\tconst event: TEvent = {\r\n\t\t\tdetail: {\r\n\t\t\t\ttabId: this.tabId,\r\n\t\t\t\tisPrimary: this.isPrimaryTab(),\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\twindow.dispatchEvent(new CustomEvent(globalConfig.dict.primaryStatusChanged, event))\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the current tab is the primary tab.\r\n\t * @returns True if the current tab is the primary tab, false otherwise.\r\n\t */\r\n\tpublic isPrimaryTab(): boolean {\r\n\t\treturn this.get(globalConfig.dict.primaryTabId) === this.tabId;\r\n\t}\r\n}\r\n","/**\r\n * @file TabsBroadcast.ts\r\n * @description A class for managing inter-tab communication via BroadcastChannel.\r\n *\r\n * This class implements a singleton pattern to ensure a single instance.\r\n * It allows for registering, emitting, and handling various types of events across different browser tabs.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config'\r\nimport { TabsWorker } from './tabsWorker'\r\nimport {TCallbackItem, TDefaultConfig, TEvent, TPayload} from \"./types\";\r\n\r\n/**\r\n * TabsBroadcast class facilitates inter-tab communication using the BroadcastChannel API.\r\n * It ensures a single instance is used across the application and provides methods to register,\r\n * emit, and handle events.\r\n */\r\nexport class TabsBroadcast {\r\n    #callbacks: TCallbackItem[];\r\n    #channelName: string;\r\n    #listenOwnChannel: boolean;\r\n    #onBecomePrimaryCallback: (payload: any) => void;\r\n    #emitByPrimaryOnly: boolean;\r\n    #worker: TabsWorker;\r\n    #channel: null|BroadcastChannel;\r\n    private static instance: null|TabsBroadcast;\r\n\r\n    constructor(config: null|TDefaultConfig = null) {\r\n        // Ensure singleton instance\r\n        if (TabsBroadcast.instance) return TabsBroadcast.instance;\r\n\r\n        this.setConfig(config)\r\n        this.#init();\r\n\r\n        TabsBroadcast.instance = this;\r\n    }\r\n\r\n    /**\r\n     * Initialize the BroadcastChannel and set up event listeners.\r\n     */\r\n    #init() {\r\n        if (!window) return\r\n\r\n        this.#worker = new TabsWorker();\r\n\r\n        this.#channel = new BroadcastChannel(this.#channelName);\r\n\r\n        this.#channel.onmessage = (event) => {\r\n            const { type, payload } = event.data as TPayload;\r\n\r\n            this.#callbacks = this.#callbacks.filter(item => {\r\n                if (item.type === type) {\r\n                    item.callback(payload);\r\n\r\n                    return !item.toRemove;\r\n                }\r\n\r\n                return true;\r\n            });\r\n        };\r\n\r\n        this.#channel.onmessageerror = error => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                console.error('Can\\'t parse message', error);\r\n            }\r\n        };\r\n\r\n        this.#onBecomePrimary()\r\n    }\r\n\r\n    /**\r\n     * Set up the event listener for becoming the primary tab.\r\n     */\r\n    #onBecomePrimary() {\r\n        window.addEventListener(globalConfig.dict.primaryStatusChanged, (event: Event) => {\r\n            const _event = event as unknown as TEvent;\r\n\r\n            if (this.isPrimary()) {\r\n                this.#onBecomePrimaryCallback(_event.detail);\r\n            }\r\n        }, { passive: true });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed whenever a message of the specified type is received.\r\n     * @param {string} type - The type of the message.\r\n     * @param {function} callback - The function to execute when a message of the specified type is received.\r\n     */\r\n    on(type: string, callback: () => void) {\r\n        this.#callbacks.push({ type, callback });\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed whenever messages of specified types are received.\r\n     * @param {Array.<Array.<string, function>>} list - List of type-callback pairs.\r\n     */\r\n    onList(list: [string, () => void][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#callbacks.push({ type, callback });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed only once when a message of the specified type is received.\r\n     * @param {string} type - The type of the message.\r\n     * @param {function} callback - The function to execute when a message of the specified type is received.\r\n     */\r\n    once(type: string, callback: () => void) {\r\n        this.#callbacks.push({ type, callback, toRemove: true });\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed one-time when messages of specified types are received.\r\n     * @param {Array.<Array.<string, function>>} list - List of type-callback pairs.\r\n     */\r\n    onceList(list: [string, () => void][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#callbacks.push({ type, callback, toRemove: true });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unregister all callbacks of the specified type.\r\n     * @param {string} type - The type of the messages for which to unregister the callbacks.\r\n     */\r\n    off(type: string) {\r\n        this.#callbacks = this.#callbacks.filter(item => item.type !== type);\r\n    }\r\n\r\n    /**\r\n     * Emit a message to all listening tabs with the specified type and payload.\r\n     * @param {string} type - The type of the message.\r\n     * @param {*} [payload=null] - The payload of the message.\r\n     */\r\n    emit(type: string, payload: any = null) {\r\n        if (this.#emitByPrimaryOnly && !this.isPrimary()) return;\r\n\r\n        if (!this.#channel) return;\r\n\r\n        const message: TPayload = { type, payload };\r\n        this.#channel.postMessage(message);\r\n\r\n        if (this.#listenOwnChannel) {\r\n            // @ts-ignore\r\n            this.#channel.onmessage({ data: message });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the current tab is the primary tab.\r\n     * @returns {boolean} - True if the current tab is primary, false otherwise.\r\n     */\r\n    isPrimary(): boolean {\r\n        return this.#worker.isPrimaryTab();\r\n    }\r\n\r\n    /**\r\n     * Set custom config properties\r\n     * @param {TDefaultConfig} config - Optional custom config\r\n     */\r\n    setConfig(config: null|TDefaultConfig) {\r\n        const _config = {\r\n            ...globalConfig.defaultConfig,\r\n            ...config\r\n        };\r\n\r\n        this.#callbacks = [];\r\n        this.#channelName = _config.channelName;\r\n        this.#listenOwnChannel = _config.listenOwnChannel;\r\n        this.#onBecomePrimaryCallback = _config.onBecomePrimary;\r\n        this.#emitByPrimaryOnly = _config.emitByPrimaryOnly;\r\n    }\r\n\r\n    /**\r\n     * Destroy the BroadcastChannel. Messages will no longer be received.\r\n     */\r\n    destroy() {\r\n        if (this.#channel) {\r\n            this.#channel.close();\r\n        }\r\n\r\n        TabsBroadcast.instance = null;\r\n        this.#channel = null;\r\n    }\r\n}\r\n"],"names":["globalConfig","channelName","listenOwnChannel","emitByPrimaryOnly","onBecomePrimary","onTabsUpdate","tab_prefix","slave","primary","primaryTabId","primaryStatusChanged","TabsWorker","this","tabId","Date","now","toString","init","window","addEventListener","localStorage","getItem","setSlaveTab","setPrimaryTab","notifyTabStatus","isPrimaryTab","transferPrimaryStatus","removeTabStatus","event","key","value","setItem","removeItem","id","set","tabs","Object","keys","filter","get","length","remove","detail","isPrimary","dispatchEvent","CustomEvent","TabsBroadcast","callbacks","config","__privateAdd","_l","_o","onBecomePrimaryCallback","worker","channel","instance","setConfig","type","callback","push","e","list","forEach","toRemove","item","payload","message","postMessage","onmessage","data","_config","close","l_fn","BroadcastChannel","onmessageerror","error","process","env","NODE_ENV","console","o_fn","_event","passive","static","_i"],"mappings":"+xBAae,MAAAA,EACC,CACdC,YAAa,qBACbC,iBAAkB,GAClBC,kBAAmB,GACnBC,gBAAiB,IAAA,CAAA,EACjBC,aAAc,IAAA,CAAA,CAAA,EANDL,EAQR,CACLM,WAAY,iBACZC,MAAQ,eACRC,QAAU,iBACVC,aAAe,wBACfC,qBAAuB,2BAAA,ECVlB,MAAMC,CAAAA,CAGZ,aACCC,CAHgBC,EAAAA,cAGhBD,KAAKC,MAAQb,EAAkBM,WAAaQ,KAAKC,IAAAA,EAAMC,SACvDJ,EAAAA,KAAKK,KACN,CAAA,CAKQ,MAAAA,CACe,OAAXC,OAAW,MA6BfA,OAAAC,iBAAiB,OA1BT,IAAA,CACTC,aAAaC,QAAQrB,EAAkBS,YAAAA,EAGtCG,KAAAU,YAAYV,KAAKC,KAAAA,EAFjBD,KAAAW,cAAcX,KAAKC,KAAAA,EAKzBD,KAAKY,gBAAAA,CAAgB,CAoBfN,EAAAA,OAAAC,iBAAiB,eAhBD,IAClBP,CAAAA,KAAKa,aACRb,GAAAA,KAAKc,sBAEDd,EAAAA,KAAAe,gBAAgBf,KAAKC,KAAK,CAAA,CAAA,EAazBK,OAAAC,iBAAiB,UATLS,GAAAA,CACdA,EAAMC,MAAQ7B,EAAkBS,cACnCG,KAAKY,gBAAAA,CACN,CAOF,EAAA,CAOQ,IAAIK,EAAaC,EAAAA,CACXV,aAAAW,QAAQF,EAAKC,CAC3B,CAAA,CAOQ,IAAID,EACJ,CAAA,OAAAT,aAAaC,QAAQQ,CAC7B,CAAA,CAMQ,OAAOA,EACdT,CAAAA,aAAaY,WAAWH,CAAAA,CACzB,CAMQ,cAAcI,EAAAA,CACrBrB,KAAKsB,IAAIlC,EAAkBS,aAAcwB,CACzCrB,EAAAA,KAAKsB,IAAID,EAAIjC,EAAkBQ,OAAAA,CAChC,CAMQ,YAAYyB,EAAAA,CACnBrB,KAAKsB,IAAID,EAAIjC,EAAkBO,KAChC,CAAA,CAKQ,uBAAAmB,CACP,MAAMS,EAAOC,OAAOC,KAAKjB,YAAckB,EAAAA,OAAcT,GAAAA,IAAQ7B,EAAkBS,cAAgBG,KAAK2B,IAAIV,CAAS7B,IAAAA,EAAkBO,KAE/H4B,EAAAA,EAAKK,OAAS,EACZ5B,KAAAW,cAAcY,EAAK,CAAA,CAAA,EAEnBvB,KAAA6B,OAAOzC,EAAkBS,YAAAA,CAEhC,CAMQ,gBAAgBwB,EAAAA,CACvBrB,KAAK6B,OAAOR,CACb,CAAA,CAKQ,iBAAAT,CACP,GAAsB,OAAXN,OAAW,IAAa,OAEnC,MAAMU,EAAgB,CACrBc,OAAQ,CACP7B,MAAOD,KAAKC,MACZ8B,UAAW/B,KAAKa,aAIlBP,CAAAA,CAAAA,EAAAA,OAAO0B,cAAc,IAAIC,YAAY7C,EAAkBU,qBAAsBkB,CAAAA,CAAAA,CAC9E,CAMO,cACN,CAAA,OAAOhB,KAAK2B,IAAIvC,EAAkBS,YAAAA,IAAkBG,KAAKC,KAC1D,CCjIM,CAAA,MAAMiC,EAAN,MAAMA,CACTC,CASA,YAAYC,EAA8B,KAEtC,CAWJC,EAAA,KAAAC,GAiCAD,EAAA,KAAAE,GAvDAJ,EAAAA,KAAAA,EAAAA,QACA9C,EAAAA,KAAAA,EAAAA,QACAC,EAAAA,KAAAA,EAAAA,QACAkD,EAAAA,KAAAA,EAAAA,QACAjD,EAAAA,KAAAA,EAAAA,QACAkD,EAAAA,KAAAA,EAAAA,QACAC,EAAAA,KAAAA,EAAAA,QAKI,GAAIR,EAAcS,SAAU,OAAOT,EAAcS,SAEjD3C,KAAK4C,UAAUR,CACfpC,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,WAEAkC,EAAcS,SAAW3C,IAC7B,CAqDA,GAAG6C,EAAcC,EACb9C,CAAAA,EAAAA,KAAAA,GAAgB+C,KAAK,CAAEF,KAAAA,EAAMC,SACjCE,CAAA,CAAA,CAAA,CAMA,OAAOC,EACEA,CAAAA,EAAKrB,QAEVqB,EAAKC,QAAQ,CAAA,CAAEL,EAAMC,CAAAA,IAAAA,CACZD,GAASC,GAEd9C,EAAAA,KAAKmC,GAAWY,KAAK,CAAEF,KAAMC,EAAAA,SAAAA,CAAAA,CAAAA,CAAU,CAE/C,CAAA,CAOA,KAAKD,EAAcC,EAAAA,CACf9C,EAAAA,KAAKmC,GAAWY,KAAK,CAAEF,KAAAA,EAAMC,SAAUK,EAAAA,SAAAA,EAC3C,CAAA,CAAA,CAMA,SAASF,EACAA,CAAAA,EAAKrB,QAEVqB,EAAKC,QAAQ,CAAA,CAAEL,EAAMC,CAAAA,IAAAA,CACZD,GAASC,GAEd9C,EAAAA,KAAKmC,GAAWY,KAAK,CAAEF,KAAMC,EAAAA,SAAAA,EAAUK,SAAU,EAAA,CAAA,CAAM,CAE/D,CAAA,CAMA,IAAIN,EACA7C,CAAAA,EAAAA,KAAAA,EAAkBA,EAAAA,KAAAA,GAAgB0B,OAAe0B,GAAAA,EAAKP,OAASA,CAAAA,EACnE,CAOA,KAAKA,EAAcQ,EAAe,KAAA,CAG9B,GAFIrD,EAAAA,KAAAA,IAA4BA,CAAAA,KAAK+B,UAAa,GAE7C/B,CAAAA,EAAAA,KAAAA,GAAe,OAEd,MAAAsD,EAAoB,CAAET,KAAAA,EAAMQ,QAC7BrD,CAAAA,EAAAA,EAAAA,KAAAA,GAASuD,YAAYD,CAEtBtD,EAAAA,EAAAA,KAAAA,IAEAA,EAAAA,KAAAA,GAAcwD,UAAU,CAAEC,KAAMH,CAExC,CAAA,CAAA,CAMA,WAAAvB,CACW,OAAA/B,EAAAA,KAAAA,GAAaa,aAAAA,CACxB,CAMA,UAAUuB,EAAAA,CACN,MAAMsB,EAAU,CACTtE,GAAAA,EAAAA,GACAgD,CAGPpC,EAAAA,EAAAA,KAAAA,EAAkB,CAAA,GAClBA,EAAAA,KAAKX,EAAeqE,EAAQrE,aAC5BW,EAAAA,KAAKV,EAAoBoE,EAAQpE,kBACjCU,EAAAA,KAAKwC,EAA2BkB,EAAQlE,iBACxCQ,EAAAA,KAAKT,EAAqBmE,EAAQnE,kBACtC,CAKA,SACQS,CAAAA,EAAAA,KAAAA,IACAA,EAAAA,KAAAA,GAAc2D,MAAAA,EAGlBzB,EAAcS,SAAW,KACzB3C,EAAAA,KAAAA,EAAgB,KACpB,GA7KAmC,EAAAA,YACA9C,EAAAA,YACAC,EAAAA,YACAkD,EAAAA,YACAjD,EAAAA,YACAkD,EAAAA,YACAC,EAAAA,YAgBAJ,EAAA,YAAAsB,EAAAvD,UACSC,CAAAA,SAEAN,EAAAA,KAAAyC,EAAU,IAAI1C,GAEnBC,EAAAA,KAAK0C,EAAW,IAAImB,iBAAiB7D,EAAAA,KAAKX,EAAAA,GAErCW,EAAAA,KAAA0C,GAASc,UAAaxC,GAAAA,CACvB,KAAM6B,CAAAA,KAAEA,EAAAQ,QAAMA,CAAYrC,EAAAA,EAAMyC,KAEhCzD,EAAAA,KAAAA,EAAkBA,EAAAA,KAAAA,GAAgB0B,OAAe0B,GACzCA,EAAKP,OAASA,IACdO,EAAKN,SAASO,CAEND,EAAAA,CAAAA,EAAKD,SAIpB,EAAA,EAGAnD,EAAAA,KAAA0C,GAASoB,eAA0BC,GAAAA,CAChCC,QAAQC,IAAIC,WAAa,cACjBC,QAAAJ,MAAM,sBAAwBA,CAAAA,CAC1C,EAGJ/D,EAAAA,KAAAA,EAAAA,GAAAA,WACJ,EAKAuC,EAAA,YAAA6B,EAAA5E,UAAAA,CACIc,OAAOC,iBAAiBnB,EAAkBU,qBAAuBkB,GAC7D,CAAA,MAAMqD,EAASrD,EAEXhB,KAAK+B,UAAAA,GACA/B,EAAAA,KAAAwC,GAAAxC,UAAyBqE,EAAOvC,OACzC,EACD,CAAEwC,QAAS,EAAA,CAAA,CAClB,EAxDAC,EARSrC,EAUT,YAVG,IAAMA,EAANsC"}