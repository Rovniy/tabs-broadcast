{"version":3,"file":"index.es.js","sources":["src/config.ts","src/tabsWorker.ts","src/tabsBroadcast.ts"],"sourcesContent":["/**\r\n * @file config.ts\r\n * @description Configuration file for the TabsBroadcast libraries.\r\n *\r\n * This file contains the default configuration options and constants used throughout\r\n * the TabsBroadcast and TabsWorker libraries. It sets up the default values for various\r\n * settings and provides a dictionary for common terms used within the libraries.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport type { TConfig } from './types';\r\n\r\nexport default {\r\n\tdefaultConfig: {\r\n\t\tchannelName: 'xploit_tab_channel', // Broadcast channel name\r\n\t\tlayer: 'default_layer',\r\n\t\tlistenOwnChannel: true, // Listen broadcast event on current tab\r\n\t\temitByPrimaryOnly: true, // Emits event only by Primary tab\r\n\t\tonBecomePrimary: () => {}, // Global event when current tab become Primary\r\n\t},\r\n\tdict: {\r\n\t\ttab_prefix: 'xploit_tab_id_',\r\n\t\tslave : 'xploit_slave',\r\n\t\tprimary : 'xploit_primary',\r\n\t\tprimaryTabId : 'xploit_primary_tab_id',\r\n\t\tprimaryStatusChanged : 'XPLOIT_TAB_STATUS_CHANGED',\r\n\t}\r\n} as TConfig\r\n","/**\r\n * @file tabsWorker.ts\r\n * @description A class to manage browser tabs, assigning a primary tab and handling the status changes among tabs.\r\n *\r\n * This library ensures that a single browser tab is marked as the primary tab,\r\n * while others are marked as slave tabs. When the primary tab is closed, the\r\n * status is transferred to another tab. This helps in managing tab-specific\r\n * functionalities like maintaining session states, or performing tasks which\r\n * should only occur in one tab at a time.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config';\r\nimport type { TEvent } from \"./types\";\r\n\r\nexport class TabsWorker {\r\n\tprivate readonly tabId: string;\r\n\r\n\tconstructor() {\r\n\t\tthis.tabId = globalConfig.dict.tab_prefix + Date.now().toString();\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes event listeners for load, beforeunload, and storage events.\r\n\t */\r\n\tprivate init() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\t// Callback for load event\r\n\t\tconst loadCb = () => {\r\n\t\t\tif (!localStorage.getItem(globalConfig.dict.primaryTabId)) {\r\n\t\t\t\tthis.setPrimaryTab(this.tabId);\r\n\t\t\t} else {\r\n\t\t\t\tthis.setSlaveTab(this.tabId);\r\n\t\t\t}\r\n\r\n\t\t\tthis.notifyTabStatus();\r\n\t\t};\r\n\r\n\t\t// Callback for beforeunload event\r\n\t\tconst beforeUnloadCb = () => {\r\n\t\t\tif (this.isPrimaryTab()) {\r\n\t\t\t\tthis.removeTabStatus(globalConfig.dict.primaryTabId);\r\n\t\t\t\tthis.transferPrimaryStatus();\r\n\t\t\t}\r\n\t\t\tthis.removeTabStatus(this.tabId);\r\n\t\t};\r\n\r\n\t\t// Callback for storage event\r\n\t\tconst storageCb = (event: StorageEvent) => {\r\n\t\t\tif (event.key === globalConfig.dict.primaryTabId) {\r\n\t\t\t\tthis.notifyTabStatus();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Adding event listeners\r\n\t\tif (document.readyState === \"complete\") {\r\n\t\t\tloadCb();\r\n\t\t} else {\r\n\t\t\twindow.addEventListener('load', loadCb);\r\n\t\t}\r\n\t\twindow.addEventListener('pagehide', beforeUnloadCb);\r\n\t\twindow.addEventListener('storage', storageCb);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a key-value pair in localStorage.\r\n\t * @param key - The key to set in localStorage.\r\n\t * @param value - The value to set in localStorage.\r\n\t */\r\n\tprivate set(key: string, value: string) {\r\n\t\tlocalStorage.setItem(key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a value from localStorage by key.\r\n\t * @param key - The key to get from localStorage.\r\n\t * @returns The value associated with the key in localStorage.\r\n\t */\r\n\tprivate get(key: string): string | null {\r\n\t\treturn localStorage.getItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a key from localStorage.\r\n\t * @param key - The key to remove from localStorage.\r\n\t */\r\n\tprivate remove(key: string) {\r\n\t\tlocalStorage.removeItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as the primary tab.\r\n\t * @param id - The ID of the tab to set as primary.\r\n\t */\r\n\tprivate setPrimaryTab(id: string) {\r\n\t\tthis.set(globalConfig.dict.primaryTabId, id);\r\n\t\tthis.set(id, globalConfig.dict.primary);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as a slave tab.\r\n\t * @param id - The ID of the tab to set as slave.\r\n\t */\r\n\tprivate setSlaveTab(id: string) {\r\n\t\tthis.set(id, globalConfig.dict.slave);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfers primary status to another tab if the current primary tab is closed.\r\n\t */\r\n\tprivate transferPrimaryStatus() {\r\n\t\tconst tabs = Object\r\n\t\t\t.keys(localStorage)\r\n\t\t\t.filter(key => key !== globalConfig.dict.primaryTabId && this.get(key) === globalConfig.dict.slave);\r\n\r\n\t\tif (tabs.length > 0) {\r\n\t\t\tthis.setPrimaryTab(tabs.at(0));\r\n\t\t} else {\r\n\t\t\tthis.remove(globalConfig.dict.primaryTabId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the status of a tab from localStorage.\r\n\t * @param id - The ID of the tab to remove status for.\r\n\t */\r\n\tprivate removeTabStatus(id: string) {\r\n\t\tthis.remove(id);\r\n\t}\r\n\r\n\t/**\r\n\t * Notifies other tabs of the current tab's status (primary or slave).\r\n\t */\r\n\tprivate notifyTabStatus() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\tconst event: TEvent = {\r\n\t\t\tdetail: {\r\n\t\t\t\ttabId: this.tabId,\r\n\t\t\t\tisPrimary: this.isPrimaryTab(),\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\twindow.dispatchEvent(new CustomEvent(globalConfig.dict.primaryStatusChanged, event))\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the current tab is the primary tab.\r\n\t * @returns True if the current tab is the primary tab, false otherwise.\r\n\t */\r\n\tpublic isPrimaryTab(): boolean {\r\n\t\treturn this.get(globalConfig.dict.primaryTabId) === this.tabId;\r\n\t}\r\n}\r\n","/**\r\n * @file TabsBroadcast.ts\r\n * @description A class for managing inter-tab communication via BroadcastChannel.\r\n *\r\n * This class implements a singleton pattern to ensure a single instance.\r\n * It allows for registering, emitting, and handling various types of events across different browser tabs.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config'\r\nimport { TabsWorker } from './tabsWorker'\r\nimport {ILayers, TDefaultConfig, TEvent, TLayer, TWildcardEvent, TPayload} from './types';\r\n\r\nconst WILDCARD_EVENT = '*'\r\n\r\n/**\r\n * TabsBroadcast class facilitates inter-tab communication using the BroadcastChannel API.\r\n * It ensures a single instance is used across the application and provides methods to register,\r\n * emit, and handle events.\r\n */\r\nexport class TabsBroadcast {\r\n    #channelName: string;\r\n    #listenOwnChannel: boolean;\r\n    #onBecomePrimaryCallback: (payload: any) => void;\r\n    #emitByPrimaryOnly: boolean;\r\n    #worker: TabsWorker;\r\n    #channel: null|BroadcastChannel;\r\n    #layers: ILayers\r\n    primary: boolean = false;\r\n\r\n    private static instance: null|TabsBroadcast;\r\n\r\n    constructor(config: null|TDefaultConfig = null) {\r\n        // Ensure singleton instance\r\n        if (TabsBroadcast.instance) return TabsBroadcast.instance;\r\n\r\n        this.setConfig(config)\r\n        this.#init();\r\n\r\n        TabsBroadcast.instance = this;\r\n    }\r\n\r\n    /**\r\n     * Initialize the BroadcastChannel and set up event listeners.\r\n     */\r\n    #init() {\r\n        if (!window) return\r\n\r\n        this.#worker = new TabsWorker();\r\n        this.#channel = new BroadcastChannel(this.#channelName);\r\n\r\n        this.#channel.onmessage = this.#onMessage.bind(this);\r\n        this.#channel.onmessageerror = this.#onError.bind(this);\r\n\r\n        this.primary = false;\r\n\r\n        this.#onBecomePrimary()\r\n    }\r\n\r\n    /**\r\n     * Set up the event listener for becoming the primary tab.\r\n     */\r\n    #onBecomePrimary() {\r\n        window.addEventListener(globalConfig.dict.primaryStatusChanged, (event: Event) => {\r\n            const _event = event as unknown as TEvent;\r\n\r\n            if (this.#worker.isPrimaryTab()) {\r\n                this.primary = true;\r\n                this.#onBecomePrimaryCallback(_event.detail);\r\n            } else {\r\n                this.primary = false;\r\n            }\r\n        }, { passive: true });\r\n    }\r\n\r\n    /**\r\n     * Checking for the existence of a layer. Creating a new layer if it does not exist\r\n     * @param {string} layer - the name of the layer you are looking for\r\n     * @private\r\n     */\r\n    #checkOrCreateLayer(layer: string = globalConfig.defaultConfig.layer) {\r\n        if (!this.#layers[layer]) {\r\n            this.#layers[layer] = {\r\n                name: layer,\r\n                listeners: []\r\n            }\r\n        }\r\n\r\n        return this.#layers[layer]\r\n    }\r\n\r\n    /**\r\n     * Processing incoming messages\r\n     * @param {MessageEvent<TPayload>} event - Incoming payload\r\n     * @private\r\n     */\r\n    #onMessage(event: MessageEvent<TPayload>) {\r\n        const { type, payload, layer } = event.data;\r\n\r\n        const _l = this.#checkOrCreateLayer(layer);\r\n\r\n        _l.listeners = _l.listeners.filter(item => {\r\n            if (item.type === type || item.type === WILDCARD_EVENT) {\r\n                item.callback({ type, payload, layer });\r\n\r\n                return !item.once;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Error handling in the broker's work\r\n     * @param {MessageEvent<any>} error - Error\r\n     * @private\r\n     */\r\n    #onError(error: MessageEvent) {\r\n        if (process.env.NODE_ENV === 'production') return;\r\n\r\n        console.error('Can\\'t parse message', error);\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed whenever a message of the specified type is received.\r\n     * And register a wildcard listener for all event types.\r\n     * @param {string} type - The type of the message.\r\n     * @param {Function} callback - The function to execute when a message of the specified type is received.\r\n     * @param {string} layer - The name of the layer to which the message is addressed.\r\n     */\r\n    on(type: string | TWildcardEvent, callback: (event: TEvent) => void, layer: string = globalConfig.defaultConfig.layer) {\r\n        this.#checkOrCreateLayer(layer)\r\n            .listeners\r\n            .push({ type, callback, once: false });\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed whenever messages of specified types are received.\r\n     * @param {Array.<Array.<string, function, string>>} list - List of type-callback pairs.\r\n     */\r\n    onList(list: [string, () => void, string][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback, layer]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#checkOrCreateLayer(layer)\r\n                .listeners\r\n                .push({ type, callback })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed only once when a message of the specified type is received.\r\n     * @param {string} type - The type of the message.\r\n     * @param {function} callback - The function to execute when a message of the specified type is received.\r\n     * @param {string} layer - The name of the layer to which the message is addressed.\r\n     */\r\n    once(type: string, callback: () => void, layer: string) {\r\n        this.#checkOrCreateLayer(layer)\r\n            .listeners\r\n            .push({ type, callback, once: true })\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed one-time when messages of specified types are received.\r\n     * @param {Array.<Array.<string, function>>} list - List of type-callback pairs.\r\n     */\r\n    onceList(list: [string, () => void, string][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback, layer = globalConfig.defaultConfig.layer]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#checkOrCreateLayer(layer)\r\n                .listeners\r\n                .push({ type, callback, once: true })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unregister all callbacks of the specified type.\r\n     * @param {string} type - The type of the messages for which to unregister the callbacks.\r\n     * @param {string|null} [layer] - Specifying the layer to delete the message from.\r\n     */\r\n    off(type: string, layer: string|null = null) {\r\n        if (layer) {\r\n            this.#layers[layer].listeners.filter(item => item.type !== type);\r\n        } else {\r\n            for (const layerName in this.#layers) {\r\n                this.#layers[layerName].listeners.filter(item => item.type !== type);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete and unregister all callbacks of the specified layer.\r\n     * @param {string} layer - The name of the layer to be deleted.\r\n     */\r\n    deleteLayer(layer: string) {\r\n        const _l = this.#checkOrCreateLayer(layer);\r\n\r\n        _l.listeners = []\r\n        this.#layers[layer] = null\r\n        delete this.#layers[layer]\r\n    }\r\n\r\n    /**\r\n     * Emit a message to all listening tabs with the specified type, payload and layer.\r\n     * @param {string} type - The type of the event.\r\n     * @param {*} payload - The payload to send with the event.\r\n     * @param {string | string[]} layers - A single layer name or an array of layer names.\r\n     */\r\n    emit(type: string, payload: any = null, layers: string | string[] = globalConfig.defaultConfig.layer) {\r\n        if (this.#emitByPrimaryOnly && !this.#worker.isPrimaryTab()) return;\r\n        if (!this.#channel) return;\r\n\r\n        const targetLayers = Array.isArray(layers) ? layers : [layers];\r\n\r\n        // Emit event for each target layer\r\n        targetLayers.forEach(layer => {\r\n            this.#checkOrCreateLayer(layer);\r\n\r\n            const message: TPayload = { type, payload, layer };\r\n            this.#channel.postMessage(message);\r\n\r\n            if (this.#listenOwnChannel) {\r\n                // @ts-ignore\r\n                this.#channel.onmessage({ data: message });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the current tab is the primary tab.\r\n     * @returns {boolean} - True if the current tab is primary, false otherwise.\r\n     * @deprecated - Use `TabBroadcast.primary` for primary tab identify\r\n     */\r\n    isPrimary(): boolean {\r\n        return this.#worker.isPrimaryTab();\r\n    }\r\n\r\n    /**\r\n     * Set custom config properties\r\n     * @param {TDefaultConfig} config - Optional custom config\r\n     */\r\n    setConfig(config: null|TDefaultConfig) {\r\n        const _config = {\r\n            ...globalConfig.defaultConfig,\r\n            ...config\r\n        };\r\n\r\n        this.#channelName = _config.channelName;\r\n        this.#layers = {};\r\n        this.#listenOwnChannel = _config.listenOwnChannel;\r\n        this.#onBecomePrimaryCallback = _config.onBecomePrimary;\r\n        this.#emitByPrimaryOnly = _config.emitByPrimaryOnly;\r\n    }\r\n\r\n    /**\r\n     * Destroys the BroadcastChannel and cleans up resources.\r\n     * @param {number} delay - The optional delay (in milliseconds) before destruction begins.\r\n     */\r\n    async destroy(delay: number = 0) : Promise<void> {\r\n        try {\r\n            if (delay > 0) {\r\n                await new Promise(resolve => setTimeout(resolve, delay));\r\n            }\r\n\r\n            if (this.#channel) {\r\n                this.#channel.close();\r\n                this.#channel = null;\r\n            }\r\n\r\n            if (this.#layers) {\r\n                Object.keys(this.#layers).forEach(layerKey => {\r\n                    this.#layers[layerKey].listeners = [];\r\n                });\r\n\r\n                this.#layers = {};\r\n            }\r\n\r\n            TabsBroadcast.instance = null;\r\n        } catch (error) {\r\n            console.error('TabsBroadcast: Error while destroying instance:', error);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Retrieves a list of event listeners from the layers.\r\n     *\r\n     * @return {Array} An array of event listener objects. If there is only one default layer,\r\n     *                 returns the listeners from that layer. Otherwise, aggregates listeners\r\n     *                 from all layers.\r\n     */\r\n    getEvents() {\r\n        const isOnlyDefaultLayer = Object.keys(this.#layers).length === 1 && this.#layers[globalConfig.defaultConfig.layer];\r\n\r\n        if (isOnlyDefaultLayer) {\r\n            return [ ...this.#layers[globalConfig.defaultConfig.layer].listeners ];\r\n        }\r\n\r\n        return Object.values(this.#layers).reduce((acc, layerData) => {\r\n            acc = [ ...acc, ...layerData.listeners ]\r\n            return acc\r\n        }, []);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the list of layer names.\r\n     *\r\n     * @return {string[]} An array of strings representing the keys of the layers.\r\n     */\r\n    getLayers() : string[] {\r\n        return Object.keys(this.#layers)\r\n    }\r\n\r\n    /**\r\n     * Enable plugins for extending the library.\r\n     * @param {Function} plugin - Plugin function to extend the TabsBroadcast instance.\r\n     */\r\n    use(plugin: (instance: TabsBroadcast) => void) {\r\n        plugin(this);\r\n    }\r\n}\r\n"],"names":["globalConfig","channelName","layer","listenOwnChannel","emitByPrimaryOnly","onBecomePrimary","tab_prefix","slave","primary","primaryTabId","primaryStatusChanged","TabsWorker","tabId","this","Date","now","toString","init","window","loadCb","localStorage","getItem","setSlaveTab","setPrimaryTab","notifyTabStatus","document","readyState","addEventListener","isPrimaryTab","removeTabStatus","transferPrimaryStatus","event","key","value","setItem","removeItem","id","set","tabs","Object","keys","filter","get","length","at","remove","detail","isPrimary","dispatchEvent","CustomEvent","_e","_t","_a","_r","_s","_i","_n","_r_instances","l_fn","o_fn","c_fn","h_fn","y_fn","TabsBroadcast","config","__privateAdd","onBecomePrimaryCallback","worker","channel","layers","instance","setConfig","type","callback","listeners","push","once","list","forEach","t","checkOrCreateLayer","item","layerName","payload","Array","isArray","message","postMessage","onmessage","data","_config","delay","Promise","resolve","setTimeout","close","layerKey","error","console","getEvents","values","reduce","acc","layerData","plugin","BroadcastChannel","onMessage","bind","onmessageerror","_event","passive","name","_l","onError","process","env","NODE_ENV","static"],"mappings":";;;;;;;AAaA,MAAeA,IACC,EACdC,aAAa,sBACbC,OAAO,iBACPC,kBAAkB,IAClBC,mBAAmB,IACnBC,iBAAiB,MANJL;AAAAA,EAAAA,GAAAA,IAQR,EACLM,YAAY,kBACZC,OAAQ,gBACRC,SAAU,kBACVC,cAAe,yBACfC,sBAAuB,4BAAA;ACVlB,MAAMC,EACKC;AAAAA,EAEjB,cACCC;AAHgBD,IAAAA,EAAAA;AAGhBC,SAAKD,QAAQZ,EAAkBM,aAAaQ,KAAKC,IAAAA,EAAMC,YACvDH,KAAKI,KAAAA;AAAAA,EAAK;AAAA,EAMH,OAAAA;AACH,QAAkB,OAAXC,SAAW,IAAa;AAGnC,UAAMC,IAAS,MACTC;AAAAA,mBAAaC,QAAQrB,EAAkBS,YAAAA,IAGtCI,KAAAS,YAAYT,KAAKD,KAFjBC,IAAAA,KAAAU,cAAcV,KAAKD,KAAAA,GAKzBC,KAAKW,gBAAgB;AAAA,IAAA;AAoBM,IAAxBC,SAASC,eAAe,aACpBP,EAEAD,IAAAA,OAAAS,iBAAiB,QAAQR,CAAAA,GAE1BD,OAAAS,iBAAiB,YArBD,MAClBd;AAAAA,WAAKe,mBACHf,KAAAgB,gBAAgB7B,EAAkBS,YACvCI,GAAAA,KAAKiB,0BAEDjB,KAAAgB,gBAAgBhB,KAAKD,KAAAA;AAAAA,IAAK,IAiBzBM,OAAAS,iBAAiB,WAbLI,OACdA;AAAAA,QAAMC,QAAQhC,EAAkBS,gBACnCI,KAAKW,gBAAAA;AAAAA,IAAgB;EAWqB;AAAA,EAQrC,IAAIQ,GAAaC,GAAAA;AACXb,iBAAAc,QAAQF,GAAKC,CAAK;AAAA,EAAA;AAAA,EAQxB,IAAID,GAAAA;AACJ,WAAAZ,aAAaC,QAAQW;EAAG;AAAA,EAOxB,OAAOA,GAAAA;AACdZ,iBAAae,WAAWH,CAAAA;AAAAA,EAAG;AAAA,EAOpB,cAAcI;AACrBvB,SAAKwB,IAAIrC,EAAkBS,cAAc2B,IACzCvB,KAAKwB,IAAID,GAAIpC,EAAkBQ,OAAAA;AAAAA,EAAO;AAAA,EAO/B,YAAY4B,GACnBvB;AAAAA,SAAKwB,IAAID,GAAIpC,EAAkBO;EAAK;AAAA,EAM7B;AACP,UAAM+B,IAAOC,OACXC,KAAKpB,cACLqB,OAAcT,OAAAA,MAAQhC,EAAkBS,gBAAgBI,KAAK6B,IAAIV,CAAAA,MAAShC,EAAkBO,KAAAA;AAE1F+B,IAAAA,EAAKK,SAAS,IACjB9B,KAAKU,cAAce,EAAKM,GAAG,CAEtB/B,CAAAA,IAAAA,KAAAgC,OAAO7C,EAAkBS;EAC/B;AAAA,EAOO,gBAAgB2B,GAAAA;AACvBvB,SAAKgC,OAAOT,CAAAA;AAAAA,EAAE;AAAA,EAMP;AACH,QAAkB,OAAXlB,SAAW,IAAa;AAEnC,UAAMa,IAAgB,EACrBe,QAAQ,EACPlC,OAAOC,KAAKD,OACZmC,WAAWlC,KAAKe,aAIlBV,EAAAA,EAAAA;AAAAA,WAAO8B,cAAc,IAAIC,YAAYjD,EAAkBU,sBAAsBqB;EAAM;AAAA,EAO7E;AACN,WAAOlB,KAAK6B,IAAI1C,EAAkBS,YAAAA,MAAkBI,KAAKD;AAAAA,EAAA;;AD7I3D,IAAAsC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC;AEQO,MAAMC,IAAN,MAAMA,EAAAA;AAAAA,EAYT,YAAYC,IAA8B,MAAA;AAZvC,IAAAC,EAAA,MAAAR;AACHxD,IAAAA,EAAAA,MAAAA;AACAE,IAAAA,EAAAA,MAAAA;AACA+D,IAAAA,EAAAA,MAAAA;AACA9D,IAAAA,EAAAA,MAAAA;AACA+D,IAAAA,EAAAA,MAAAA;AACAC,IAAAA,EAAAA,MAAAA;AACAC,IAAAA,EAAAA,MAAAA;AACA7D,IAAAA,EAAAA,iBAAAA;AAMQ,QAAAuD,EAAcO,SAAU,QAAOP,EAAcO;AAEjDzD,SAAK0D,UAAUP,IACfnD,EAAAA,MAAKI,GAAAA,GAALJ,YAEAkD,EAAcO,WAAWzD;AAAAA,EAAA;AAAA,EA2F7B,GAAG2D,GAA+BC,GAAmCvE,IAAgBF,EAA2BE,OAAAA;AACvGW,IAAAA,EAAAA,YAAAA,WAAoBX,GACpBwE,UACAC,KAAK,EAAEH,MAAMC,GAAAA,UAAAA,GAAUG,SAAa,CAAA;AAAA,EAAA;AAAA,EAO7C,OAAOC,GAAAA;AACEA,IAAAA,EAAKlC,UAEVkC,EAAKC,QAAQ,CAAA,CAAEN,GAAMC,GAAUvE,CAAAA,MAAAA;AACtBsE,WAASC,KAET5D,EAAAA,MAAAA,GAAAA,GAAAA,WAAoBX,GACpBwE,UACAC,KAAK,EAAEH,SAAMC,UAAUM,EAAA,CAAA;AAAA,IAAA,CAAA;AAAA,EAC/B;AAAA,EASL,KAAKP,GAAcC,GAAsBvE;AAChCW,IAAAA,EAAAA,MAAAmE,GAAAA,GAAAnE,WAAoBX,GACpBwE,UACAC,KAAK,EAAEH,MAAMC,GAAAA,UAAAA,GAAUG,MAAM,GAAA,CAAA;AAAA,EAAM;AAAA,EAO5C,SAASC;AACAA,MAAKlC,UAELkC,EAAAC,QAAQ,CAAA,CAAEN,GAAMC,GAAUvE,IAAQF,EAA2BE,KAAAA,MAAAA;AACzDsE,MAAAA,KAASC,KAET5D,EAAAA,MAAAA,GAAAA,GAAAA,WAAoBX,GACpBwE,UACAC,KAAK,EAAEH,SAAMC,UAAUG,GAAAA,MAAAA;IAAY,CAC3C;AAAA,EAAA;AAAA,EAQL,IAAIJ,GAActE,IAAqB,MAAA;AACnC,QAAIA,EACKW,CAAAA,EAAAA,MAAAA,GAAQX,CAAOwE,EAAAA,UAAUjC,OAAewC,CAAAA,MAAAA,EAAKT,SAASA,CAAAA;AAAAA,QAEhD,YAAAU,KAAarE,EAAAA,SACfA,CAAAA,EAAAA,MAAAA,GAAQqE,CAAWR,EAAAA,UAAUjC,OAAewC,CAAAA,MAAAA,EAAKT,SAASA,CAAAA;AAAAA,EAEvE;AAAA,EAOJ,YAAYtE;AACGW,IAAAA,EAAAA,MAAKmE,GAAAA,GAALnE,WAAyBX,GAEjCwE,YAAY,IACV7D,EAAAA,MAAAwD,GAAQnE,KAAS,MACfW,OAAAA,EAAAA,MAAAA,GAAaX,CAAK;AAAA,EAAA;AAAA,EAS7B,KAAKsE,GAAcW,IAAe,MAAMd,IAA4BrE,EAA2BE,OAAAA;AAC3F,IAAIW,EAAAA,MAAKT,MAAAA,CAAuBS,EAAAA,MAAKsD,GAAQvC,kBACxCf,EAAAA,MAAKuD,OAEWgB,MAAMC,QAAQhB,CAAUA,IAAAA,IAAS,CAACA,CAG1CS,GAAAA,QAAiB5E,CAAAA;AAC1BW,MAAAA,EAAAA,MAAKmE,GAAAA,GAALnE,WAAyBX;AAEzB,YAAMoF,IAAoB,EAAEd,MAAAA,GAAMW,YAASjF,OACtCW,EAAAA;AAAAA,MAAAA,EAAAA,MAAAA,GAAS0E,YAAYD,CAAAA,GAEtBzE,EAAAA,YAEAA,EAAAA,MAAAA,GAAc2E,UAAU,EAAEC,MAAMH,EAAAA,CAAAA;AAAAA,IAAS;EAEhD;AAAA,EAQL;AACW,WAAAzE,EAAAA,MAAAA,GAAae,aAAAA;AAAAA,EAAa;AAAA,EAOrC,UAAUoC;AACN,UAAM0B,IAAU,KACT1F,GACAgE,GAAAA,EAAAA;AAGPnD,IAAAA,EAAAA,MAAKZ,GAAeyF,EAAQzF,cAC5BY,EAAAA,MAAAA,GAAe,CAAC,IAChBA,EAAAA,SAAyB6E,EAAQvF,mBACjCU,EAAAA,MAAAA,GAAgC6E,EAAQrF,kBACxCQ,EAAAA,SAA0B6E,EAAQtF;AAAAA,EAAA;AAAA,EAOtC,MAAA,QAAcuF,IAAgB;AACtB,QACIA;AAAAA,MAAAA,IAAQ,WACF,IAAIC,QAAQC,CAAAA,MAAWC,WAAWD,GAASF,CAGjD9E,CAAAA,GAAAA,EAAAA,MAAAA,OACAA,EAAAA,MAAKuD,GAAS2B,SACdlF,EAAAA,MAAKuD,GAAW,QAGhBvD,EAAAA,MAAKwD,OACL9B,OAAOC,KAAK3B,EAAAA,QAAciE,EAAAA,QAAoBkB;AAC1CnF,QAAAA,EAAAA,MAAKwD,GAAQ2B,GAAUtB,YAAY,CAAA;AAAA,MAAC,CAGxC7D,GAAAA,EAAAA,MAAAA,GAAe,CAAC,KAGpBkD,EAAcO,WAAW;AAAA,aACpB2B,GAAAA;AACGC,cAAAD,MAAM,mDAAmDA,CAAK;AAAA,IAAA;AAAA,EAC1E;AAAA,EAWJ,YAAAE;AAGI,WAF2B5D,OAAOC,KAAK3B,EAAAA,MAAAA,IAAc8B,WAAW,KAAK9B,EAAAA,MAAAA,GAAab,EAA2BE,KAAAA,IAGlG,IAAKW,EAAAA,MAAKwD,GAAQrE,EAA2BE,KAAAA,EAAOwE,aAGxDnC,OAAO6D,OAAOvF,EAAAA,QAAcwF,EAAAA,OAAO,CAACC,GAAKC,MAC5CD,IAAM,CAAA,GAAKA,MAAQC,EAAU7B,SAAAA,GAE9B;EAAE;AAAA,EAQT;AACW,WAAAnC,OAAOC,KAAK3B,EAAAA,MAAAA;EAAY;AAAA,EAOnC,IAAI2F,GACAA;AAAAA,IAAAA,EAAO3F;EAAI;;AA9SfZ,IAAAA,eACAE,IAAAA,eACA+D,IAAAA,eACA9D,IAAAA,eACA+D,IAAAA,eACAC,IAAAA,eACAC,IAAAA,eAPGZ,IAAA,eAyBHC,IAAAzC;AACSC,aAEAL,EAAAA,MAAAA,GAAU,IAAIF,MACnBE,EAAAA,SAAgB,IAAI4F,iBAAiB5F,EAAAA,MAAAA,MAErCA,EAAAA,MAAKuD,GAASoB,YAAY3E,EAAAA,MAAK6F,GAAAA,GAAWC,KAAK9F,IAC/CA,GAAAA,EAAAA,MAAAA,GAAc+F,iBAAiB/F,EAAAA,YAAc8F,KAAK9F,OAElDA,KAAKL,UAAAA,IAELK,EAAAA,MAAKR,GAAAA,GAALQ;AAAsB,GAM1B8C,IAAAtD;AACIa,SAAOS,iBAAiB3B,EAAkBU,sBAAuBqB,CAAAA,MAAAA;AAC7D,UAAM8E,IAAS9E;AAEXlB,IAAAA,EAAAA,MAAKsD,GAAQvC,kBACbf,KAAKL,UAAAA,IACAK,EAAAA,MAAAqD,GAAArD,WAAyBgG,EAAO/D,WAErCjC,KAAKL,UAAU;AAAA,EAAA,GAEpB,EAAEsG,SAAAA;AAAe,GAQxBlD,IAAAoB,SAAoB9E,IAAgBF,EAA2BE,OAQpD;AAAA,SAPFW,EAAAA,SAAaX,CAAAA,MACTW,EAAAA,SAAQX,CAAAA,IAAS,EAClB6G,MAAM7G,GACNwE,WAAW,CAAA,EAAA,IAIZ7D,EAAAA,SAAaX,CAAAA;AAAK,GAQ7B2D,IAAA6C,SAAW3E;AACP,QAAMyC,EAAAA,MAAEA,GAAAW,SAAMA,GAASjF,OAAAA,EAAAA,IAAU6B,EAAM0D,MAEjCuB,IAAKnG,EAAAA,YAAAA,WAAyBX;AAEpC8G,EAAAA,EAAGtC,YAAYsC,EAAGtC,UAAUjC,OAAewC,CAAAA,MACnCA,EAAKT,SAASA,KAAQS,EAAKT,SAzFpB,QA0FPS,EAAKR,SAAS,EAAED,SAAMW,SAASjF,GAAAA,OAAAA,EAAAA,CAAAA,GAAAA,CAEvB+E,EAAKL,KAIpB;AAAA,GAQLd,IAAAmD,SAAShB;AACwB,EAAzBiB,QAAQC,IAAIC,aAAa,gBAErBlB,QAAAD,MAAM,uBAAwBA,CAAAA;AAAK,GA1F/CoB,EAVStD,GAYT;AAZG,IAAMA,IAANV;"}