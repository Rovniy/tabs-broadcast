{"version":3,"file":"index.es.js","sources":["src/config.ts","src/tabsWorker.ts","src/tabsBroadcast.ts"],"sourcesContent":["/**\r\n * @file config.ts\r\n * @description Configuration file for the TabsBroadcast libraries.\r\n *\r\n * This file contains the default configuration options and constants used throughout\r\n * the TabsBroadcast and TabsWorker libraries. It sets up the default values for various\r\n * settings and provides a dictionary for common terms used within the libraries.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport type { TConfig } from './types';\r\n\r\nexport default {\r\n\tdefaultConfig: {\r\n\t\tchannelName: 'xploit_tab_channel', // Broadcast channel name\r\n\t\tlistenOwnChannel: true, // Listen broadcast event on current tab\r\n\t\temitByPrimaryOnly: true, // Emits event only by Primary tab\r\n\t\tonBecomePrimary: () => {}, // Global event when current tab become Primary\r\n\t},\r\n\tdict: {\r\n\t\ttab_prefix: 'xploit_tab_id_',\r\n\t\tslave : 'xploit_slave',\r\n\t\tprimary : 'xploit_primary',\r\n\t\tprimaryTabId : 'xploit_primary_tab_id',\r\n\t\tprimaryStatusChanged : 'XPLOIT_TAB_STATUS_CHANGED',\r\n\t}\r\n} as TConfig","/**\r\n * @file tabsWorker.ts\r\n * @description A class to manage browser tabs, assigning a primary tab and handling the status changes among tabs.\r\n *\r\n * This library ensures that a single browser tab is marked as the primary tab,\r\n * while others are marked as slave tabs. When the primary tab is closed, the\r\n * status is transferred to another tab. This helps in managing tab-specific\r\n * functionalities like maintaining session states, or performing tasks which\r\n * should only occur in one tab at a time.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config';\r\nimport type { TEvent } from \"./types\";\r\n\r\nexport class TabsWorker {\r\n\tprivate readonly tabId: string;\r\n\r\n\tconstructor() {\r\n\t\tthis.tabId = globalConfig.dict.tab_prefix + Date.now().toString();\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes event listeners for load, beforeunload, and storage events.\r\n\t */\r\n\tprivate init() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\t// Callback for load event\r\n\t\tconst loadCb = () => {\r\n\t\t\tif (!localStorage.getItem(globalConfig.dict.primaryTabId)) {\r\n\t\t\t\tthis.setPrimaryTab(this.tabId);\r\n\t\t\t} else {\r\n\t\t\t\tthis.setSlaveTab(this.tabId);\r\n\t\t\t}\r\n\r\n\t\t\tthis.notifyTabStatus();\r\n\t\t};\r\n\r\n\t\t// Callback for beforeunload event\r\n\t\tconst beforeUnloadCb = () => {\r\n\t\t\tif (this.isPrimaryTab()) {\r\n\t\t\t\tthis.transferPrimaryStatus();\r\n\t\t\t}\r\n\t\t\tthis.removeTabStatus(this.tabId);\r\n\r\n\t\t\tif (this.isPrimaryTab()) {\r\n\t\t\t\tthis.removeTabStatus(globalConfig.dict.primaryTabId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Callback for storage event\r\n\t\tconst storageCb = (event: StorageEvent) => {\r\n\t\t\tif (event.key === globalConfig.dict.primaryTabId) {\r\n\t\t\t\tthis.notifyTabStatus();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Adding event listeners\r\n\t\tif (document.readyState === \"complete\") {\r\n\t\t\tloadCb();\r\n\t\t} else {\r\n\t\t\twindow.addEventListener('load', loadCb);\r\n\t\t}\r\n\t\twindow.addEventListener('beforeunload', beforeUnloadCb);\r\n\t\twindow.addEventListener('storage', storageCb);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a key-value pair in localStorage.\r\n\t * @param key - The key to set in localStorage.\r\n\t * @param value - The value to set in localStorage.\r\n\t */\r\n\tprivate set(key: string, value: string) {\r\n\t\tlocalStorage.setItem(key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a value from localStorage by key.\r\n\t * @param key - The key to get from localStorage.\r\n\t * @returns The value associated with the key in localStorage.\r\n\t */\r\n\tprivate get(key: string): string | null {\r\n\t\treturn localStorage.getItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a key from localStorage.\r\n\t * @param key - The key to remove from localStorage.\r\n\t */\r\n\tprivate remove(key: string) {\r\n\t\tlocalStorage.removeItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as the primary tab.\r\n\t * @param id - The ID of the tab to set as primary.\r\n\t */\r\n\tprivate setPrimaryTab(id: string) {\r\n\t\tthis.set(globalConfig.dict.primaryTabId, id);\r\n\t\tthis.set(id, globalConfig.dict.primary);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as a slave tab.\r\n\t * @param id - The ID of the tab to set as slave.\r\n\t */\r\n\tprivate setSlaveTab(id: string) {\r\n\t\tthis.set(id, globalConfig.dict.slave);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfers primary status to another tab if the current primary tab is closed.\r\n\t */\r\n\tprivate transferPrimaryStatus() {\r\n\t\tconst tabs = Object.keys(localStorage).filter(key => key !== globalConfig.dict.primaryTabId && this.get(key) === globalConfig.dict.slave);\r\n\r\n\t\tif (tabs.length > 0) {\r\n\t\t\tthis.setPrimaryTab(tabs[0]);\r\n\t\t} else {\r\n\t\t\tthis.remove(globalConfig.dict.primaryTabId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the status of a tab from localStorage.\r\n\t * @param id - The ID of the tab to remove status for.\r\n\t */\r\n\tprivate removeTabStatus(id: string) {\r\n\t\tthis.remove(id);\r\n\t}\r\n\r\n\t/**\r\n\t * Notifies other tabs of the current tab's status (primary or slave).\r\n\t */\r\n\tprivate notifyTabStatus() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\tconst event: TEvent = {\r\n\t\t\tdetail: {\r\n\t\t\t\ttabId: this.tabId,\r\n\t\t\t\tisPrimary: this.isPrimaryTab(),\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\twindow.dispatchEvent(new CustomEvent(globalConfig.dict.primaryStatusChanged, event))\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the current tab is the primary tab.\r\n\t * @returns True if the current tab is the primary tab, false otherwise.\r\n\t */\r\n\tpublic isPrimaryTab(): boolean {\r\n\t\treturn this.get(globalConfig.dict.primaryTabId) === this.tabId;\r\n\t}\r\n}\r\n","/**\r\n * @file TabsBroadcast.ts\r\n * @description A class for managing inter-tab communication via BroadcastChannel.\r\n *\r\n * This class implements a singleton pattern to ensure a single instance.\r\n * It allows for registering, emitting, and handling various types of events across different browser tabs.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config'\r\nimport { TabsWorker } from './tabsWorker'\r\nimport { TCallbackItem, TDefaultConfig, TEvent, TPayload } from './types';\r\n\r\n/**\r\n * TabsBroadcast class facilitates inter-tab communication using the BroadcastChannel API.\r\n * It ensures a single instance is used across the application and provides methods to register,\r\n * emit, and handle events.\r\n */\r\nexport class TabsBroadcast {\r\n    #callbacks: TCallbackItem[];\r\n    #channelName: string;\r\n    #listenOwnChannel: boolean;\r\n    #onBecomePrimaryCallback: (payload: any) => void;\r\n    #emitByPrimaryOnly: boolean;\r\n    #worker: TabsWorker;\r\n    #channel: null|BroadcastChannel;\r\n    private static instance: null|TabsBroadcast;\r\n\r\n    constructor(config: null|TDefaultConfig = null) {\r\n        // Ensure singleton instance\r\n        if (TabsBroadcast.instance) return TabsBroadcast.instance;\r\n\r\n        this.setConfig(config)\r\n        this.#init();\r\n\r\n        TabsBroadcast.instance = this;\r\n    }\r\n\r\n    /**\r\n     * Initialize the BroadcastChannel and set up event listeners.\r\n     */\r\n    #init() {\r\n        if (!window) return\r\n\r\n        this.#worker = new TabsWorker();\r\n        this.#channel = new BroadcastChannel(this.#channelName);\r\n\r\n        this.#channel.onmessage = (event) => {\r\n            const { type, payload } = event.data as TPayload;\r\n\r\n            this.#callbacks = this.#callbacks.filter(item => {\r\n                if (item.type === type) {\r\n                    item.callback(event.data);\r\n\r\n                    return !item.once;\r\n                }\r\n\r\n                return true;\r\n            });\r\n        };\r\n\r\n        this.#channel.onmessageerror = error => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                console.error('Can\\'t parse message', error);\r\n            }\r\n        };\r\n\r\n        this.#onBecomePrimary()\r\n    }\r\n\r\n    /**\r\n     * Set up the event listener for becoming the primary tab.\r\n     */\r\n    #onBecomePrimary() {\r\n        window.addEventListener(globalConfig.dict.primaryStatusChanged, (event: Event) => {\r\n            const _event = event as unknown as TEvent;\r\n\r\n            if (this.isPrimary()) {\r\n                this.#onBecomePrimaryCallback(_event.detail);\r\n            }\r\n        }, { passive: true });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed whenever a message of the specified type is received.\r\n     * @param {string} type - The type of the message.\r\n     * @param {function} callback - The function to execute when a message of the specified type is received.\r\n     */\r\n    on(type: string, callback: () => void) {\r\n        this.#callbacks.push({ type, callback });\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed whenever messages of specified types are received.\r\n     * @param {Array.<Array.<string, function>>} list - List of type-callback pairs.\r\n     */\r\n    onList(list: [string, () => void][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#callbacks.push({ type, callback });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed only once when a message of the specified type is received.\r\n     * @param {string} type - The type of the message.\r\n     * @param {function} callback - The function to execute when a message of the specified type is received.\r\n     */\r\n    once(type: string, callback: () => void) {\r\n        this.#callbacks.push({ type, callback, once: true });\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed one-time when messages of specified types are received.\r\n     * @param {Array.<Array.<string, function>>} list - List of type-callback pairs.\r\n     */\r\n    onceList(list: [string, () => void][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#callbacks.push({ type, callback, once: true });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unregister all callbacks of the specified type.\r\n     * @param {string} type - The type of the messages for which to unregister the callbacks.\r\n     */\r\n    off(type: string) {\r\n        this.#callbacks = this.#callbacks.filter(item => item.type !== type);\r\n    }\r\n\r\n    /**\r\n     * Emit a message to all listening tabs with the specified type and payload.\r\n     * @param {string} type - The type of the message.\r\n     * @param {*} [payload=null] - The payload of the message.\r\n     */\r\n    emit(type: string, payload: any = null) {\r\n        if (this.#emitByPrimaryOnly && !this.isPrimary()) return;\r\n\r\n        if (!this.#channel) return;\r\n\r\n        const message: TPayload = { type, payload };\r\n        this.#channel.postMessage(message);\r\n\r\n        if (this.#listenOwnChannel) {\r\n            // @ts-ignore\r\n            this.#channel.onmessage({ data: message });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the current tab is the primary tab.\r\n     * @returns {boolean} - True if the current tab is primary, false otherwise.\r\n     */\r\n    isPrimary(): boolean {\r\n        return this.#worker.isPrimaryTab();\r\n    }\r\n\r\n    /**\r\n     * Set custom config properties\r\n     * @param {TDefaultConfig} config - Optional custom config\r\n     */\r\n    setConfig(config: null|TDefaultConfig) {\r\n        const _config = {\r\n            ...globalConfig.defaultConfig,\r\n            ...config\r\n        };\r\n\r\n        this.#callbacks = [];\r\n        this.#channelName = _config.channelName;\r\n        this.#listenOwnChannel = _config.listenOwnChannel;\r\n        this.#onBecomePrimaryCallback = _config.onBecomePrimary;\r\n        this.#emitByPrimaryOnly = _config.emitByPrimaryOnly;\r\n    }\r\n\r\n    /**\r\n     * Destroy the BroadcastChannel. Messages will no longer be received.\r\n     */\r\n    destroy() {\r\n        if (this.#channel) {\r\n            this.#channel.close();\r\n        }\r\n\r\n        TabsBroadcast.instance = null;\r\n        this.#channel = null;\r\n    }\r\n\r\n    /**\r\n     * Receive copy of events list\r\n     */\r\n    getEvents() {\r\n        return [ ...this.#callbacks ]\r\n    }\r\n}\r\n"],"names":["globalConfig","channelName","listenOwnChannel","emitByPrimaryOnly","onBecomePrimary","tab_prefix","slave","primary","primaryTabId","primaryStatusChanged","TabsWorker","this","tabId","Date","now","toString","init","window","loadCb","localStorage","getItem","setSlaveTab","setPrimaryTab","notifyTabStatus","document","readyState","addEventListener","isPrimaryTab","transferPrimaryStatus","removeTabStatus","event","key","value","setItem","removeItem","id","set","tabs","Object","keys","filter","get","length","remove","detail","isPrimary","dispatchEvent","CustomEvent","_t","_a","_e","_i","_s","_n","_r","_l","l_fn","_o","o_fn","TabsBroadcast","callbacks","config","__privateAdd","onBecomePrimaryCallback","worker","channel","instance","setConfig","type","callback","push","list","forEach","once","item","payload","message","postMessage","onmessage","data","_config","destroy","close","getEvents","BroadcastChannel","onmessageerror","error","process","env","NODE_ENV","console","_event","passive","static"],"mappings":"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"}