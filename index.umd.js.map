{"version":3,"file":"index.umd.js","sources":["src/config.ts","src/tabsWorker.ts","src/tabsBroadcast.ts"],"sourcesContent":["/**\r\n * @file config.ts\r\n * @description Configuration file for the TabsBroadcast libraries.\r\n *\r\n * This file contains the default configuration options and constants used throughout\r\n * the TabsBroadcast and TabsWorker libraries. It sets up the default values for various\r\n * settings and provides a dictionary for common terms used within the libraries.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport type { TConfig } from './types';\r\n\r\nexport default {\r\n\tdefaultConfig: {\r\n\t\tchannelName: 'xploit_tab_channel', // Broadcast channel name\r\n\t\tlayer: 'default_layer',\r\n\t\tlistenOwnChannel: true, // Listen broadcast event on current tab\r\n\t\temitByPrimaryOnly: true, // Emits event only by Primary tab\r\n\t\tonBecomePrimary: () => {}, // Global event when current tab become Primary\r\n\t},\r\n\tdict: {\r\n\t\ttab_prefix: 'xploit_tab_id_',\r\n\t\tslave : 'xploit_slave',\r\n\t\tprimary : 'xploit_primary',\r\n\t\tprimaryTabId : 'xploit_primary_tab_id',\r\n\t\tprimaryStatusChanged : 'XPLOIT_TAB_STATUS_CHANGED',\r\n\t}\r\n} as TConfig\r\n","/**\r\n * @file tabsWorker.ts\r\n * @description A class to manage browser tabs, assigning a primary tab and handling the status changes among tabs.\r\n *\r\n * This library ensures that a single browser tab is marked as the primary tab,\r\n * while others are marked as slave tabs. When the primary tab is closed, the\r\n * status is transferred to another tab. This helps in managing tab-specific\r\n * functionalities like maintaining session states, or performing tasks which\r\n * should only occur in one tab at a time.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config';\r\nimport type { TEvent } from \"./types\";\r\n\r\nexport class TabsWorker {\r\n\tprivate readonly tabId: string;\r\n\r\n\tconstructor() {\r\n\t\tthis.tabId = globalConfig.dict.tab_prefix + Date.now().toString();\r\n\t\tthis.init();\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes event listeners for load, beforeunload, and storage events.\r\n\t */\r\n\tprivate init() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\t// Callback for load event\r\n\t\tconst loadCb = () => {\r\n\t\t\tif (!localStorage.getItem(globalConfig.dict.primaryTabId)) {\r\n\t\t\t\tthis.setPrimaryTab(this.tabId);\r\n\t\t\t} else {\r\n\t\t\t\tthis.setSlaveTab(this.tabId);\r\n\t\t\t}\r\n\r\n\t\t\tthis.notifyTabStatus();\r\n\t\t};\r\n\r\n\t\t// Callback for beforeunload event\r\n\t\tconst beforeUnloadCb = () => {\r\n\t\t\tif (this.isPrimaryTab()) {\r\n\t\t\t\tthis.removeTabStatus(globalConfig.dict.primaryTabId);\r\n\t\t\t\tthis.transferPrimaryStatus();\r\n\t\t\t}\r\n\t\t\tthis.removeTabStatus(this.tabId);\r\n\t\t};\r\n\r\n\t\t// Callback for storage event\r\n\t\tconst storageCb = (event: StorageEvent) => {\r\n\t\t\tif (event.key === globalConfig.dict.primaryTabId) {\r\n\t\t\t\tthis.notifyTabStatus();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Adding event listeners\r\n\t\tif (document.readyState === \"complete\") {\r\n\t\t\tloadCb();\r\n\t\t} else {\r\n\t\t\twindow.addEventListener('load', loadCb);\r\n\t\t}\r\n\t\twindow.addEventListener('pagehide', beforeUnloadCb);\r\n\t\twindow.addEventListener('storage', storageCb);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a key-value pair in localStorage.\r\n\t * @param key - The key to set in localStorage.\r\n\t * @param value - The value to set in localStorage.\r\n\t */\r\n\tprivate set(key: string, value: string) {\r\n\t\tlocalStorage.setItem(key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets a value from localStorage by key.\r\n\t * @param key - The key to get from localStorage.\r\n\t * @returns The value associated with the key in localStorage.\r\n\t */\r\n\tprivate get(key: string): string | null {\r\n\t\treturn localStorage.getItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a key from localStorage.\r\n\t * @param key - The key to remove from localStorage.\r\n\t */\r\n\tprivate remove(key: string) {\r\n\t\tlocalStorage.removeItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as the primary tab.\r\n\t * @param id - The ID of the tab to set as primary.\r\n\t */\r\n\tprivate setPrimaryTab(id: string) {\r\n\t\tthis.set(globalConfig.dict.primaryTabId, id);\r\n\t\tthis.set(id, globalConfig.dict.primary);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the current tab as a slave tab.\r\n\t * @param id - The ID of the tab to set as slave.\r\n\t */\r\n\tprivate setSlaveTab(id: string) {\r\n\t\tthis.set(id, globalConfig.dict.slave);\r\n\t}\r\n\r\n\t/**\r\n\t * Transfers primary status to another tab if the current primary tab is closed.\r\n\t */\r\n\tprivate transferPrimaryStatus() {\r\n\t\tconst tabs = Object\r\n\t\t\t.keys(localStorage)\r\n\t\t\t.filter(key => key !== globalConfig.dict.primaryTabId && this.get(key) === globalConfig.dict.slave);\r\n\r\n\t\tif (tabs.length > 0) {\r\n\t\t\tthis.setPrimaryTab(tabs.at(0));\r\n\t\t} else {\r\n\t\t\tthis.remove(globalConfig.dict.primaryTabId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the status of a tab from localStorage.\r\n\t * @param id - The ID of the tab to remove status for.\r\n\t */\r\n\tprivate removeTabStatus(id: string) {\r\n\t\tthis.remove(id);\r\n\t}\r\n\r\n\t/**\r\n\t * Notifies other tabs of the current tab's status (primary or slave).\r\n\t */\r\n\tprivate notifyTabStatus() {\r\n\t\tif (typeof window === 'undefined') return;\r\n\r\n\t\tconst event: TEvent = {\r\n\t\t\tdetail: {\r\n\t\t\t\ttabId: this.tabId,\r\n\t\t\t\tisPrimary: this.isPrimaryTab(),\r\n\t\t\t},\r\n\t\t};\r\n\r\n\t\twindow.dispatchEvent(new CustomEvent(globalConfig.dict.primaryStatusChanged, event))\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the current tab is the primary tab.\r\n\t * @returns True if the current tab is the primary tab, false otherwise.\r\n\t */\r\n\tpublic isPrimaryTab(): boolean {\r\n\t\treturn this.get(globalConfig.dict.primaryTabId) === this.tabId;\r\n\t}\r\n}\r\n","/**\r\n * @file TabsBroadcast.ts\r\n * @description A class for managing inter-tab communication via BroadcastChannel.\r\n *\r\n * This class implements a singleton pattern to ensure a single instance.\r\n * It allows for registering, emitting, and handling various types of events across different browser tabs.\r\n *\r\n * License: MIT\r\n * Author: Andrei (Ravy) Rovnyi\r\n */\r\nimport globalConfig from './config'\r\nimport { TabsWorker } from './tabsWorker'\r\nimport {ILayers, TDefaultConfig, TEvent, TLayer, TPayload} from './types';\r\n\r\n/**\r\n * TabsBroadcast class facilitates inter-tab communication using the BroadcastChannel API.\r\n * It ensures a single instance is used across the application and provides methods to register,\r\n * emit, and handle events.\r\n */\r\nexport class TabsBroadcast {\r\n    #channelName: string;\r\n    #listenOwnChannel: boolean;\r\n    #onBecomePrimaryCallback: (payload: any) => void;\r\n    #emitByPrimaryOnly: boolean;\r\n    #worker: TabsWorker;\r\n    #channel: null|BroadcastChannel;\r\n    #layers: ILayers\r\n    primary: boolean = false;\r\n\r\n    private static instance: null|TabsBroadcast;\r\n\r\n    constructor(config: null|TDefaultConfig = null) {\r\n        // Ensure singleton instance\r\n        if (TabsBroadcast.instance) return TabsBroadcast.instance;\r\n\r\n        this.setConfig(config)\r\n        this.#init();\r\n\r\n        TabsBroadcast.instance = this;\r\n    }\r\n\r\n    /**\r\n     * Initialize the BroadcastChannel and set up event listeners.\r\n     */\r\n    #init() {\r\n        if (!window) return\r\n\r\n        this.#worker = new TabsWorker();\r\n        this.#channel = new BroadcastChannel(this.#channelName);\r\n\r\n        this.#channel.onmessage = this.#onMessage.bind(this);\r\n        this.#channel.onmessageerror = this.#onError.bind(this);\r\n\r\n        this.primary = false;\r\n\r\n        this.#onBecomePrimary()\r\n    }\r\n\r\n    /**\r\n     * Set up the event listener for becoming the primary tab.\r\n     */\r\n    #onBecomePrimary() {\r\n        window.addEventListener(globalConfig.dict.primaryStatusChanged, (event: Event) => {\r\n            const _event = event as unknown as TEvent;\r\n\r\n            if (this.#worker.isPrimaryTab()) {\r\n                this.primary = true;\r\n                this.#onBecomePrimaryCallback(_event.detail);\r\n            } else {\r\n                this.primary = false;\r\n            }\r\n        }, { passive: true });\r\n    }\r\n\r\n    /**\r\n     * Checking for the existence of a layer. Creating a new layer if it does not exist\r\n     * @param {string} layer - the name of the layer you are looking for\r\n     * @private\r\n     */\r\n    #checkOrCreateLayer(layer: string = globalConfig.defaultConfig.layer) {\r\n        if (!this.#layers[layer]) {\r\n            this.#layers[layer] = {\r\n                name: layer,\r\n                listeners: []\r\n            }\r\n        }\r\n\r\n        return this.#layers[layer]\r\n    }\r\n\r\n    /**\r\n     * Processing incoming messages\r\n     * @param {MessageEvent<TPayload>} event - Incoming payload\r\n     * @private\r\n     */\r\n    #onMessage(event: MessageEvent<TPayload>) {\r\n        const { type, payload, layer } = event.data;\r\n\r\n        const _l = this.#checkOrCreateLayer(layer);\r\n\r\n        _l.listeners = _l.listeners.filter(item => {\r\n            if (item.type === type) {\r\n                item.callback({ type, payload, layer });\r\n\r\n                return !item.once;\r\n            }\r\n\r\n            return true;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Error handling in the broker's work\r\n     * @param {MessageEvent<any>} error - Error\r\n     * @private\r\n     */\r\n    #onError(error: MessageEvent) {\r\n        if (process.env.NODE_ENV === 'production') return;\r\n\r\n        console.error('Can\\'t parse message', error);\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed whenever a message of the specified type is received.\r\n     * @param {string} type - The type of the message.\r\n     * @param {function} callback - The function to execute when a message of the specified type is received.\r\n     * @param {string} layer - The name of the layer to which the message is addressed.\r\n     */\r\n    on(type: string, callback: () => void, layer: string) {\r\n        this.#checkOrCreateLayer(layer)\r\n            .listeners\r\n            .push({ type, callback })\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed whenever messages of specified types are received.\r\n     * @param {Array.<Array.<string, function, string>>} list - List of type-callback pairs.\r\n     */\r\n    onList(list: [string, () => void, string][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback, layer]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#checkOrCreateLayer(layer)\r\n                .listeners\r\n                .push({ type, callback })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a callback to be executed only once when a message of the specified type is received.\r\n     * @param {string} type - The type of the message.\r\n     * @param {function} callback - The function to execute when a message of the specified type is received.\r\n     * @param {string} layer - The name of the layer to which the message is addressed.\r\n     */\r\n    once(type: string, callback: () => void, layer: string) {\r\n        this.#checkOrCreateLayer(layer)\r\n            .listeners\r\n            .push({ type, callback, once: true })\r\n    }\r\n\r\n    /**\r\n     * Register multiple callbacks to be executed one-time when messages of specified types are received.\r\n     * @param {Array.<Array.<string, function>>} list - List of type-callback pairs.\r\n     */\r\n    onceList(list: [string, () => void, string][]) {\r\n        if (!list.length) return;\r\n\r\n        list.forEach(([type, callback, layer = globalConfig.defaultConfig.layer]) => {\r\n            if (!type || !callback) return;\r\n\r\n            this.#checkOrCreateLayer(layer)\r\n                .listeners\r\n                .push({ type, callback, once: true })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unregister all callbacks of the specified type.\r\n     * @param {string} type - The type of the messages for which to unregister the callbacks.\r\n     * @param {string|null} [layer] - Specifying the layer to delete the message from.\r\n     */\r\n    off(type: string, layer: string|null = null) {\r\n        if (layer) {\r\n            this.#layers[layer].listeners.filter(item => item.type !== type);\r\n        } else {\r\n            for (const layerName in this.#layers) {\r\n                this.#layers[layerName].listeners.filter(item => item.type !== type);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete and unregister all callbacks of the specified layer.\r\n     * @param {string} layer - The name of the layer to be deleted.\r\n     */\r\n    deleteLayer(layer: string) {\r\n        const _l = this.#checkOrCreateLayer(layer);\r\n\r\n        _l.listeners = []\r\n        this.#layers[layer] = null\r\n        delete this.#layers[layer]\r\n    }\r\n\r\n    /**\r\n     * Emit a message to all listening tabs with the specified type, payload and layer.\r\n     * @param {string} type - The type of the message.\r\n     * @param {*} [payload=null] - The payload of the message.\r\n     * @param {string} [layer] - The name of the layer to which the message is addressed.\r\n     */\r\n    emit(type: string, payload: any = null, layer: string = globalConfig.defaultConfig.layer) {\r\n        if (this.#emitByPrimaryOnly && !this.#worker.isPrimaryTab()) return;\r\n\r\n        if (!this.#channel) return;\r\n\r\n        const message: TPayload = { type, payload, layer };\r\n        this.#channel.postMessage(message);\r\n\r\n        if (this.#listenOwnChannel) {\r\n            // @ts-ignore\r\n            this.#channel.onmessage({ data: message });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the current tab is the primary tab.\r\n     * @returns {boolean} - True if the current tab is primary, false otherwise.\r\n     * @deprecated - Use `TabBroadcast.primary` for primary tab identify\r\n     */\r\n    isPrimary(): boolean {\r\n        return this.#worker.isPrimaryTab();\r\n    }\r\n\r\n    /**\r\n     * Set custom config properties\r\n     * @param {TDefaultConfig} config - Optional custom config\r\n     */\r\n    setConfig(config: null|TDefaultConfig) {\r\n        const _config = {\r\n            ...globalConfig.defaultConfig,\r\n            ...config\r\n        };\r\n\r\n        this.#channelName = _config.channelName;\r\n        this.#layers = {};\r\n        this.#listenOwnChannel = _config.listenOwnChannel;\r\n        this.#onBecomePrimaryCallback = _config.onBecomePrimary;\r\n        this.#emitByPrimaryOnly = _config.emitByPrimaryOnly;\r\n    }\r\n\r\n    /**\r\n     * Destroy the BroadcastChannel. Messages will no longer be received.\r\n     */\r\n    destroy() {\r\n        if (this.#channel) {\r\n            this.#channel.close();\r\n        }\r\n\r\n        TabsBroadcast.instance = null;\r\n        this.#channel = null;\r\n    }\r\n\r\n    /**\r\n     * Receive copy of events list\r\n     */\r\n    getEvents() {\r\n        const isOnlyDefaultLayer = Object.keys(this.#layers).length === 1 && this.#layers[globalConfig.defaultConfig.layer];\r\n\r\n        if (isOnlyDefaultLayer) {\r\n            return [ ...this.#layers[globalConfig.defaultConfig.layer].listeners ];\r\n        }\r\n\r\n        return Object.values(this.#layers).reduce((acc, layerData) => {\r\n            acc = [ ...acc, ...layerData.listeners ]\r\n            return acc\r\n        }, []);\r\n    }\r\n\r\n    /**\r\n     * Get a list of all available layers\r\n     */\r\n    getLayers() : string[] {\r\n        return Object.keys(this.#layers)\r\n    }\r\n}\r\n"],"names":["globalConfig","channelName","layer","listenOwnChannel","emitByPrimaryOnly","onBecomePrimary","tab_prefix","slave","primary","primaryTabId","primaryStatusChanged","TabsWorker","tabId","this","Date","now","toString","init","window","loadCb","localStorage","getItem","setSlaveTab","setPrimaryTab","notifyTabStatus","document","readyState","addEventListener","isPrimaryTab","removeTabStatus","transferPrimaryStatus","event","key","value","setItem","removeItem","id","set","tabs","Object","keys","filter","get","length","at","remove","detail","isPrimary","dispatchEvent","CustomEvent","TabsBroadcast","config","__privateAdd","_r_instances","onBecomePrimaryCallback","worker","channel","layers","instance","setConfig","type","callback","listeners","push","list","forEach","checkOrCreateLayer","t","once","item","layerName","payload","message","postMessage","onmessage","data","_config","close","values","reduce","acc","layerData","getLayers","l_fn","BroadcastChannel","onMessage","bind","onmessageerror","y_fn","_event","passive","c_fn","name","o_fn","_l","h_fn","onError","error","process","env","NODE_ENV","console","static","_r"],"mappings":"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"}