{"version":3,"file":"index.umd.js","sources":["src/config.ts","src/tabsWorker.ts","src/tabsBroadcast.ts"],"sourcesContent":["/**\n * @file config.ts\n * @description Configuration file for the TabsBroadcast libraries.\n *\n * This file contains the default configuration options and constants used throughout\n * the TabsBroadcast and TabsWorker libraries. It sets up the default values for various\n * settings and provides a dictionary for common terms used within the libraries.\n *\n * License: MIT\n * Author: Andrei (Ravy) Rovnyi\n */\nimport type { TConfig } from './types';\n\nexport default {\n\tdefaultConfig: {\n\t\tchannelName: 'xploit_tab_channel', // Broadcast channel name\n\t\tlayer: 'default_layer',\n\t\tlistenOwnChannel: true, // Listen broadcast event on current tab\n\t\temitByPrimaryOnly: true, // Emits event only by Primary tab\n\t\tonBecomePrimary: () => {}, // Global event when current tab become Primary\n\t},\n\tdict: {\n\t\ttab_prefix: 'xploit_tab_id_',\n\t\tslave : 'xploit_slave',\n\t\tprimary : 'xploit_primary',\n\t\tprimaryTabId : 'xploit_primary_tab_id',\n\t\tprimaryStatusChanged : 'XPLOIT_TAB_STATUS_CHANGED',\n\t}\n} as TConfig\n","/**\n * @file tabsWorker.ts\n * @description A class to manage browser tabs, assigning a primary tab and handling the status changes among tabs.\n *\n * This library ensures that a single browser tab is marked as the primary tab,\n * while others are marked as slave tabs. When the primary tab is closed, the\n * status is transferred to another tab. This helps in managing tab-specific\n * functionalities like maintaining session states, or performing tasks which\n * should only occur in one tab at a time.\n *\n * License: MIT\n * Author: Andrei (Ravy) Rovnyi\n */\nimport globalConfig from './config';\nimport type { TEvent } from \"./types\";\n\nexport class TabsWorker {\n\tprivate readonly tabId: string;\n\n\tconstructor() {\n\t\tthis.tabId = globalConfig.dict.tab_prefix + Date.now().toString();\n\t\tthis.init();\n\t}\n\n\t/**\n\t * Initializes event listeners for load, beforeunload, and storage events.\n\t */\n\tprivate init() {\n\t\tif (typeof window === 'undefined') return;\n\n\t\t// Callback for load event\n\t\tconst loadCb = () => {\n\t\t\tif (!localStorage.getItem(globalConfig.dict.primaryTabId)) {\n\t\t\t\tthis.setPrimaryTab(this.tabId);\n\t\t\t} else {\n\t\t\t\tthis.setSlaveTab(this.tabId);\n\t\t\t}\n\n\t\t\tthis.notifyTabStatus();\n\t\t};\n\n\t\t// Callback for beforeunload event\n\t\tconst beforeUnloadCb = () => {\n\t\t\tif (this.isPrimaryTab()) {\n\t\t\t\tthis.removeTabStatus(globalConfig.dict.primaryTabId);\n\t\t\t\tthis.transferPrimaryStatus();\n\t\t\t}\n\t\t\tthis.removeTabStatus(this.tabId);\n\t\t};\n\n\t\t// Callback for storage event\n\t\tconst storageCb = (event: StorageEvent) => {\n\t\t\tif (event.key === globalConfig.dict.primaryTabId) {\n\t\t\t\tthis.notifyTabStatus();\n\t\t\t}\n\t\t};\n\n\t\t// Adding event listeners\n\t\tif (document.readyState === \"complete\") {\n\t\t\tloadCb();\n\t\t} else {\n\t\t\twindow.addEventListener('load', loadCb);\n\t\t}\n\t\twindow.addEventListener('pagehide', beforeUnloadCb);\n\t\twindow.addEventListener('storage', storageCb);\n\t}\n\n\t/**\n\t * Sets a key-value pair in localStorage.\n\t * @param key - The key to set in localStorage.\n\t * @param value - The value to set in localStorage.\n\t */\n\tprivate set(key: string, value: string) {\n\t\tlocalStorage.setItem(key, value);\n\t}\n\n\t/**\n\t * Gets a value from localStorage by key.\n\t * @param key - The key to get from localStorage.\n\t * @returns The value associated with the key in localStorage.\n\t */\n\tprivate get(key: string): string | null {\n\t\treturn localStorage.getItem(key);\n\t}\n\n\t/**\n\t * Removes a key from localStorage.\n\t * @param key - The key to remove from localStorage.\n\t */\n\tprivate remove(key: string) {\n\t\tlocalStorage.removeItem(key);\n\t}\n\n\t/**\n\t * Sets the current tab as the primary tab.\n\t * @param id - The ID of the tab to set as primary.\n\t */\n\tprivate setPrimaryTab(id: string) {\n\t\tthis.set(globalConfig.dict.primaryTabId, id);\n\t\tthis.set(id, globalConfig.dict.primary);\n\t}\n\n\t/**\n\t * Sets the current tab as a slave tab.\n\t * @param id - The ID of the tab to set as slave.\n\t */\n\tprivate setSlaveTab(id: string) {\n\t\tthis.set(id, globalConfig.dict.slave);\n\t}\n\n\t/**\n\t * Transfers primary status to another tab if the current primary tab is closed.\n\t */\n\tprivate transferPrimaryStatus() {\n\t\tconst tabs = Object\n\t\t\t.keys(localStorage)\n\t\t\t.filter(key => key !== globalConfig.dict.primaryTabId && this.get(key) === globalConfig.dict.slave);\n\n\t\tif (tabs.length > 0) {\n\t\t\tthis.setPrimaryTab(tabs.at(0));\n\t\t} else {\n\t\t\tthis.remove(globalConfig.dict.primaryTabId);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the status of a tab from localStorage.\n\t * @param id - The ID of the tab to remove status for.\n\t */\n\tprivate removeTabStatus(id: string) {\n\t\tthis.remove(id);\n\t}\n\n\t/**\n\t * Notifies other tabs of the current tab's status (primary or slave).\n\t */\n\tprivate notifyTabStatus() {\n\t\tif (typeof window === 'undefined') return;\n\n\t\tconst event: TEvent = {\n\t\t\tdetail: {\n\t\t\t\ttabId: this.tabId,\n\t\t\t\tisPrimary: this.isPrimaryTab(),\n\t\t\t},\n\t\t};\n\n\t\twindow.dispatchEvent(new CustomEvent(globalConfig.dict.primaryStatusChanged, event))\n\t}\n\n\t/**\n\t * Checks if the current tab is the primary tab.\n\t * @returns True if the current tab is the primary tab, false otherwise.\n\t */\n\tpublic isPrimaryTab(): boolean {\n\t\treturn this.get(globalConfig.dict.primaryTabId) === this.tabId;\n\t}\n}\n","/**\n * @file TabsBroadcast.ts\n * @description A class for managing inter-tab communication via BroadcastChannel.\n *\n * This class implements a singleton pattern to ensure a single instance.\n * It allows for registering, emitting, and handling various types of events across different browser tabs.\n *\n * License: MIT\n * Author: Andrei (Ravy) Rovnyi\n */\nimport globalConfig from './config'\nimport { TabsWorker } from './tabsWorker'\nimport {ILayers, TDefaultConfig, TEvent, TLayer, TPayload} from './types';\n\n/**\n * TabsBroadcast class facilitates inter-tab communication using the BroadcastChannel API.\n * It ensures a single instance is used across the application and provides methods to register,\n * emit, and handle events.\n */\nexport class TabsBroadcast {\n    #channelName: string;\n    #listenOwnChannel: boolean;\n    #onBecomePrimaryCallback: (payload: any) => void;\n    #emitByPrimaryOnly: boolean;\n    #worker: TabsWorker;\n    #channel: null|BroadcastChannel;\n    #layers: ILayers\n    primary: boolean = false;\n\n    private static instance: null|TabsBroadcast;\n\n    constructor(config: null|TDefaultConfig = null) {\n        // Ensure singleton instance\n        if (TabsBroadcast.instance) return TabsBroadcast.instance;\n\n        this.setConfig(config)\n        this.#init();\n\n        TabsBroadcast.instance = this;\n    }\n\n    /**\n     * Initialize the BroadcastChannel and set up event listeners.\n     */\n    #init() {\n        if (!window) return\n\n        this.#worker = new TabsWorker();\n        this.#channel = new BroadcastChannel(this.#channelName);\n\n        this.#channel.onmessage = this.#onMessage.bind(this);\n        this.#channel.onmessageerror = this.#onError.bind(this);\n\n        this.primary = false;\n\n        this.#onBecomePrimary()\n    }\n\n    /**\n     * Set up the event listener for becoming the primary tab.\n     */\n    #onBecomePrimary() {\n        window.addEventListener(globalConfig.dict.primaryStatusChanged, (event: Event) => {\n            const _event = event as unknown as TEvent;\n\n            if (this.#worker.isPrimaryTab()) {\n                this.primary = true;\n                this.#onBecomePrimaryCallback(_event.detail);\n            } else {\n                this.primary = false;\n            }\n        }, { passive: true });\n    }\n\n    /**\n     * Checking for the existence of a layer. Creating a new layer if it does not exist\n     * @param {string} layer - the name of the layer you are looking for\n     * @private\n     */\n    #checkOrCreateLayer(layer: string = globalConfig.defaultConfig.layer) {\n        if (!this.#layers[layer]) {\n            this.#layers[layer] = {\n                name: layer,\n                listeners: []\n            }\n        }\n\n        return this.#layers[layer]\n    }\n\n    /**\n     * Processing incoming messages\n     * @param {MessageEvent<TPayload>} event - Incoming payload\n     * @private\n     */\n    #onMessage(event: MessageEvent<TPayload>) {\n        const { type, payload, layer } = event.data;\n\n        const _l = this.#checkOrCreateLayer(layer);\n\n        _l.listeners = _l.listeners.filter(item => {\n            if (item.type === type) {\n                item.callback({ type, payload, layer });\n\n                return !item.once;\n            }\n\n            return true;\n        });\n    };\n\n    /**\n     * Error handling in the broker's work\n     * @param {MessageEvent<any>} error - Error\n     * @private\n     */\n    #onError(error: MessageEvent) {\n        if (process.env.NODE_ENV === 'production') return;\n\n        console.error('Can\\'t parse message', error);\n    }\n\n    /**\n     * Register a callback to be executed whenever a message of the specified type is received.\n     * @param {string} type - The type of the message.\n     * @param {function} callback - The function to execute when a message of the specified type is received.\n     * @param {string} layer - The name of the layer to which the message is addressed.\n     */\n    on(type: string, callback: () => void, layer: string) {\n        this.#checkOrCreateLayer(layer)\n            .listeners\n            .push({ type, callback })\n    }\n\n    /**\n     * Register multiple callbacks to be executed whenever messages of specified types are received.\n     * @param {Array.<Array.<string, function, string>>} list - List of type-callback pairs.\n     */\n    onList(list: [string, () => void, string][]) {\n        if (!list.length) return;\n\n        list.forEach(([type, callback, layer]) => {\n            if (!type || !callback) return;\n\n            this.#checkOrCreateLayer(layer)\n                .listeners\n                .push({ type, callback })\n        });\n    }\n\n    /**\n     * Register a callback to be executed only once when a message of the specified type is received.\n     * @param {string} type - The type of the message.\n     * @param {function} callback - The function to execute when a message of the specified type is received.\n     * @param {string} layer - The name of the layer to which the message is addressed.\n     */\n    once(type: string, callback: () => void, layer: string) {\n        this.#checkOrCreateLayer(layer)\n            .listeners\n            .push({ type, callback, once: true })\n    }\n\n    /**\n     * Register multiple callbacks to be executed one-time when messages of specified types are received.\n     * @param {Array.<Array.<string, function>>} list - List of type-callback pairs.\n     */\n    onceList(list: [string, () => void, string][]) {\n        if (!list.length) return;\n\n        list.forEach(([type, callback, layer = globalConfig.defaultConfig.layer]) => {\n            if (!type || !callback) return;\n\n            this.#checkOrCreateLayer(layer)\n                .listeners\n                .push({ type, callback, once: true })\n        });\n    }\n\n    /**\n     * Unregister all callbacks of the specified type.\n     * @param {string} type - The type of the messages for which to unregister the callbacks.\n     * @param {string|null} [layer] - Specifying the layer to delete the message from.\n     */\n    off(type: string, layer: string|null = null) {\n        if (layer) {\n            this.#layers[layer].listeners.filter(item => item.type !== type);\n        } else {\n            for (const layerName in this.#layers) {\n                this.#layers[layerName].listeners.filter(item => item.type !== type);\n            }\n        }\n    }\n\n    /**\n     * Delete and unregister all callbacks of the specified layer.\n     * @param {string} layer - The name of the layer to be deleted.\n     */\n    deleteLayer(layer: string) {\n        const _l = this.#checkOrCreateLayer(layer);\n\n        _l.listeners = []\n        this.#layers[layer] = null\n        delete this.#layers[layer]\n    }\n\n    /**\n     * Emit a message to all listening tabs with the specified type, payload and layer.\n     * @param {string} type - The type of the message.\n     * @param {*} [payload=null] - The payload of the message.\n     * @param {string} [layer] - The name of the layer to which the message is addressed.\n     */\n    emit(type: string, payload: any = null, layer: string = globalConfig.defaultConfig.layer) {\n        if (this.#emitByPrimaryOnly && !this.#worker.isPrimaryTab()) return;\n\n        if (!this.#channel) return;\n\n        const message: TPayload = { type, payload, layer };\n        this.#channel.postMessage(message);\n\n        if (this.#listenOwnChannel) {\n            // @ts-ignore\n            this.#channel.onmessage({ data: message });\n        }\n    }\n\n    /**\n     * Check if the current tab is the primary tab.\n     * @returns {boolean} - True if the current tab is primary, false otherwise.\n     * @deprecated - Use `TabBroadcast.primary` for primary tab identify\n     */\n    isPrimary(): boolean {\n        return this.#worker.isPrimaryTab();\n    }\n\n    /**\n     * Set custom config properties\n     * @param {TDefaultConfig} config - Optional custom config\n     */\n    setConfig(config: null|TDefaultConfig) {\n        const _config = {\n            ...globalConfig.defaultConfig,\n            ...config\n        };\n\n        this.#channelName = _config.channelName;\n        this.#layers = {};\n        this.#listenOwnChannel = _config.listenOwnChannel;\n        this.#onBecomePrimaryCallback = _config.onBecomePrimary;\n        this.#emitByPrimaryOnly = _config.emitByPrimaryOnly;\n    }\n\n    /**\n     * Destroy the BroadcastChannel. Messages will no longer be received.\n     */\n    destroy() {\n        if (this.#channel) {\n            this.#channel.close();\n        }\n\n        TabsBroadcast.instance = null;\n        this.#channel = null;\n    }\n\n    /**\n     * Receive copy of events list\n     */\n    getEvents() {\n        const isOnlyDefaultLayer = Object.keys(this.#layers).length === 1 && this.#layers[globalConfig.defaultConfig.layer];\n\n        if (isOnlyDefaultLayer) {\n            return [ ...this.#layers[globalConfig.defaultConfig.layer].listeners ];\n        }\n\n        return Object.values(this.#layers).reduce((acc, layerData) => {\n            acc = [ ...acc, ...layerData.listeners ]\n            return acc\n        }, []);\n    }\n\n    /**\n     * Get a list of all available layers\n     */\n    getLayers() : string[] {\n        return Object.keys(this.#layers)\n    }\n}\n"],"names":["globalConfig","channelName","layer","listenOwnChannel","emitByPrimaryOnly","onBecomePrimary","tab_prefix","slave","primary","primaryTabId","primaryStatusChanged","TabsWorker","tabId","this","Date","now","toString","init","window","loadCb","localStorage","getItem","setSlaveTab","setPrimaryTab","notifyTabStatus","document","readyState","addEventListener","isPrimaryTab","removeTabStatus","transferPrimaryStatus","event","key","value","setItem","removeItem","id","set","tabs","Object","keys","filter","get","length","at","remove","detail","isPrimary","dispatchEvent","CustomEvent","TabsBroadcast","config","__privateAdd","_r_instances","onBecomePrimaryCallback","worker","channel","layers","instance","setConfig","type","callback","listeners","push","list","forEach","checkOrCreateLayer","t","once","item","layerName","payload","message","postMessage","onmessage","data","_config","close","values","reduce","acc","layerData","getLayers","l_fn","BroadcastChannel","onMessage","bind","onmessageerror","y_fn","_event","passive","c_fn","name","o_fn","_l","h_fn","onError","error","process","env","NODE_ENV","console","static","_r"],"mappings":"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"}